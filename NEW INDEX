import React, { useState, useEffect } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInWithCustomToken, signInAnonymously, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, collection, onSnapshot, addDoc, updateDoc, deleteDoc, serverTimestamp, query } from 'firebase/firestore';

// Definir las variables globales que el entorno proporciona.
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

// El componente principal de la aplicación.
const App = () => {
  const [classes, setClasses] = useState([]);
  const [newClassName, setNewClassName] = useState('');
  const [newClassDate, setNewClassDate] = useState('');
  const [newClassTime, setNewClassTime] = useState('');
  const [loading, setLoading] = useState(true);
  const [isAuthReady, setIsAuthReady] = useState(false);
  const [userId, setUserId] = useState(null);
  const [error, setError] = useState(null);
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);
  // 'editClass' almacena la clase que se está editando. Si es nulo, se está agregando una nueva.
  const [editClass, setEditClass] = useState(null); 
  const [showModal, setShowModal] = useState(false);
  const [modalMessage, setModalMessage] = useState('');
  const [modalAction, setModalAction] = useState(null);

  // Inicializar Firebase y manejar la autenticación
  useEffect(() => {
    if (!firebaseConfig.apiKey) {
      console.error("La configuración de Firebase no está disponible. La aplicación no funcionará correctamente.");
      setLoading(false);
      setError("Configuración de Firebase no encontrada. Por favor, revisa tu entorno.");
      return;
    }

    try {
      const app = initializeApp(firebaseConfig);
      const newAuth = getAuth(app);
      const newDb = getFirestore(app);
      setAuth(newAuth);
      setDb(newDb);

      const authenticate = async () => {
        try {
          // El token de autenticación personalizado permite iniciar sesión con el mismo usuario
          // en diferentes dispositivos o sesiones.
          if (initialAuthToken) {
            await signInWithCustomToken(newAuth, initialAuthToken);
          } else {
            await signInAnonymously(newAuth);
          }
        } catch (e) {
          console.error("Fallo de autenticación:", e);
          setError("Fallo de autenticación. Por favor, inténtalo de nuevo.");
        }
      };

      const unsubscribe = onAuthStateChanged(newAuth, (user) => {
        if (user) {
          setUserId(user.uid);
          setIsAuthReady(true);
          console.log("Usuario autenticado:", user.uid);
        } else {
          setUserId(null);
          setIsAuthReady(true);
          console.log("El usuario no está autenticado. Iniciando sesión...");
          authenticate();
        }
        setLoading(false);
      });

      return () => unsubscribe();
    } catch (e) {
      console.error("Fallo en la inicialización de Firebase:", e);
      setError("Fallo al inicializar Firebase. Por favor, revisa la configuración.");
      setLoading(false);
    }
  }, []);

  // Obtener datos de Firestore una vez autenticado
  useEffect(() => {
    if (!isAuthReady || !db || !userId) return;

    setLoading(true);
    setError(null);

    const collectionPath = `/artifacts/${appId}/public/data/padel_classes`;
    const q = query(collection(db, collectionPath));
    
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const fetchedClasses = [];
      querySnapshot.forEach((doc) => {
        const data = doc.data();
        fetchedClasses.push({
          id: doc.id,
          ...data,
          date: data.date,
          time: data.time,
        });
      });

      fetchedClasses.sort((a, b) => {
        const dateA = new Date(`${a.date}T${a.time}`);
        const dateB = new Date(`${b.date}T${b.time}`);
        return dateA - dateB;
      });
      setClasses(fetchedClasses);
      setLoading(false);
    }, (e) => {
      console.error("Error al obtener los documentos: ", e);
      setError("Fallo al obtener las clases. Por favor, intenta refrescar la página.");
      setLoading(false);
    });

    return () => unsubscribe();
  }, [isAuthReady, db, userId]);

  // Manejar el envío del formulario para agregar/actualizar una clase
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!newClassName || !newClassDate || !newClassTime || !db) return;

    const classData = {
      name: newClassName,
      date: newClassDate,
      time: newClassTime,
      createdAt: serverTimestamp(),
    };

    try {
      // Si editClass existe, actualizamos la clase.
      if (editClass) {
        const classRef = doc(db, `/artifacts/${appId}/public/data/padel_classes`, editClass.id);
        await updateDoc(classRef, classData);
        setEditClass(null); // Limpiar el estado de edición
        setModalMessage("Clase actualizada con éxito.");
      } else {
        // Si no, agregamos una nueva clase.
        await addDoc(collection(db, `/artifacts/${appId}/public/data/padel_classes`), classData);
        setModalMessage("Clase agregada con éxito.");
      }
      // Limpiar los campos del formulario después de la acción.
      setNewClassName('');
      setNewClassDate('');
      setNewClassTime('');
      setShowModal(true);
    } catch (e) {
      console.error("Error al guardar la clase: ", e);
      setModalMessage("Error al guardar la clase. Intenta de nuevo.");
      setShowModal(true);
    }
  };

  // Función que se activa al hacer clic en "Editar".
  const handleEditClick = (cls) => {
    setEditClass(cls); // Guardar la clase que se está editando en el estado.
    setNewClassName(cls.name); // Cargar el nombre en el formulario.
    setNewClassDate(cls.date); // Cargar la fecha en el formulario.
    setNewClassTime(cls.time); // Cargar la hora en el formulario.
  };

  // Confirmar y eliminar una clase
  const handleDeleteClick = (id) => {
    setModalMessage("¿Estás seguro de que quieres eliminar esta clase?");
    setModalAction(() => async () => {
      try {
        const classRef = doc(db, `/artifacts/${appId}/public/data/padel_classes`, id);
        await deleteDoc(classRef);
        setModalMessage("Clase eliminada con éxito.");
      } catch (e) {
        console.error("Error al eliminar la clase: ", e);
        setModalMessage("Error al eliminar la clase. Intenta de nuevo.");
      }
      setShowModal(true);
      setModalAction(null);
    });
    setShowModal(true);
  };

  // Cerrar el modal
  const closeModal = () => {
    setShowModal(false);
    if (modalAction) {
      setModalAction(null);
    }
  };

  // Los estados de carga y error
  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-100">
        <div className="text-xl font-semibold text-gray-700 animate-pulse">Cargando...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-red-100 p-4">
        <div className="text-xl font-semibold text-red-700 text-center">{error}</div>
      </div>
    );
  }

  return (
    <div className="font-sans antialiased text-gray-800 bg-gray-50 min-h-screen p-4 sm:p-8">
      {/* Componente Modal para mensajes y confirmación */}
      {showModal && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center">
          <div className="relative p-5 border w-96 shadow-lg rounded-md bg-white">
            <div className="mt-3 text-center">
              <h3 className="text-lg leading-6 font-medium text-gray-900">{modalMessage}</h3>
              <div className="mt-2 px-7 py-3">
                <p className="text-sm text-gray-500">
                  {modalAction && "Esta acción no se puede deshacer."}
                </p>
              </div>
              <div className="items-center px-4 py-3">
                <button
                  id="ok-btn"
                  onClick={modalAction || closeModal}
                  className="px-4 py-2 bg-blue-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {modalAction ? 'Confirmar' : 'Cerrar'}
                </button>
                {modalAction && (
                  <button
                    onClick={closeModal}
                    className="mt-2 px-4 py-2 bg-gray-200 text-gray-800 text-base font-medium rounded-md w-full shadow-sm hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500"
                  >
                    Cancelar
                  </button>
                )}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Mostrar ID de usuario para contexto colaborativo */}
      <div className="flex justify-between items-center mb-6 p-4 bg-white rounded-lg shadow-sm">
        <h1 className="text-3xl font-bold text-gray-900">
          Clases de Padel
        </h1>
        <div className="text-sm text-gray-500 truncate">
          <span className="font-semibold text-gray-700">Usuario ID:</span> {userId}
        </div>
      </div>

      {/* Formulario para agregar/editar clases */}
      <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-4">{editClass ? 'Editar Clase' : 'Agregar Nueva Clase'}</h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="flex flex-col sm:flex-row gap-4">
            <input
              type="text"
              value={newClassName}
              onChange={(e) => setNewClassName(e.target.value)}
              placeholder="Nombre de la clase"
              required
              className="flex-1 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
            />
            <input
              type="date"
              value={newClassDate}
              onChange={(e) => setNewClassDate(e.target.value)}
              required
              className="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
            />
            <input
              type="time"
              value={newClassTime}
              onChange={(e) => setNewClassTime(e.target.value)}
              required
              className="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
            />
          </div>
          <div className="flex space-x-2">
            <button
              type="submit"
              className="flex-1 p-3 font-semibold text-white bg-blue-600 rounded-lg shadow-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              {editClass ? 'Guardar Cambios' : 'Agregar Clase'}
            </button>
            {editClass && (
              <button
                type="button"
                onClick={() => {
                  setEditClass(null);
                  setNewClassName('');
                  setNewClassDate('');
                  setNewClassTime('');
                }}
                className="p-3 font-semibold text-gray-800 bg-gray-200 rounded-lg shadow-md hover:bg-gray-300 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
              >
                Cancelar
              </button>
            )}
          </div>
        </form>
      </div>

      {/* Lista de clases */}
      <div className="bg-white rounded-lg shadow-lg p-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-4">Clases Registradas</h2>
        {classes.length > 0 ? (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Hora</th>
                  <th scope="col" className="relative px-6 py-3">
                    <span className="sr-only">Acciones</span>
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {classes.map((cls) => (
                  <tr key={cls.id} className="hover:bg-gray-100 transition-colors">
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{cls.name}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{cls.date}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{cls.time}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <button
                        onClick={() => handleEditClick(cls)}
                        className="text-blue-600 hover:text-blue-900 mr-2 transition-colors"
                        title="Editar"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 inline-block" viewBox="0 0 20 20" fill="currentColor">
                          <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                        </svg>
                      </button>
                      <button
                        onClick={() => handleDeleteClick(cls.id)}
                        className="text-red-600 hover:text-red-900 transition-colors"
                        title="Eliminar"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 inline-block" viewBox="0 0 20 20" fill="currentColor">
                          <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" />
                        </svg>
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <div className="text-center py-8 text-gray-500 italic">
            No hay clases registradas.
          </div>
        )}
      </div>
    </div>
  );
};

export default App;
