<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Coachex • Gestión de Pádel/Tenis</title>
  <link rel="icon" type="image/png" href="logo flaticon.png" />
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/react@18/umd/react.development.js" crossorigin></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" crossorigin></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <!-- Firebase SDKs (compat) -->
  <script src="https://www.gstatic.com/firebasejs/11.0.1/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/11.0.1/firebase-auth-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/11.0.1/firebase-firestore-compat.js"></script>
</head>
<body class="bg-slate-50">
  <div id="root"></div>

  <script>
    // Configuración de Firebase (tu proyecto)
    const firebaseConfig = {
      apiKey: "AIzaSyDU33ryp3wkbx0oJdhjC6pG3VkfNiqGk0Q",
      authDomain: "coachex-b1d9b.firebaseapp.com",
      projectId: "coachex-b1d9b",
      storageBucket: "coachex-b1d9b.appspot.com",
      messagingSenderId: "894665560100",
      appId: "1:894665560100:web:e8a61e0849f7675e1f88b1"
    };
    const app = firebase.initializeApp(firebaseConfig);
    const auth = firebase.auth();
    const db = firebase.firestore();
  </script>

  <script type="text/babel">
    const { useEffect, useState, useMemo } = React;

    // ----------------------------- Helpers UI -----------------------------
    function Card({ title, right, children }) {
      return (
        <section className="bg-white rounded-2xl shadow-sm border border-slate-200 p-4">
          <div className="flex items-center justify-between mb-3">
            <h3 className="text-base font-semibold text-slate-800">{title}</h3>
            {right}
          </div>
          {children}
        </section>
      );
    }

    function Topbar({ current, setCurrent, rightExtra }) {
      const tabs = [
        { id: "dashboard", label: "Dashboard" },
        { id: "alumnos", label: "Alumnos" },
        { id: "clases", label: "Clases" },
        { id: "pagos", label: "Pagos" },
        { id: "gastos", label: "Gastos" },
        { id: "reportes", label: "Reportes" },
        { id: "perfil", label: "Perfil" },
      ];
      return (
        <header className="w-full bg-slate-900 text-white">
          <div className="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
            <div className="flex items-center gap-3">
              <img src="logo flaticon.png" alt="Logo circular" className="w-9 h-9 rounded-full" />
              <div>
                <img src="logo letras sin fondo.png" alt="Coachex-Pro" className="h-6" />
                <p className="text-xs opacity-80 -mt-0.5">Gestión de profesor</p>
              </div>
            </div>
            <nav className="hidden md:flex items-center gap-2">
              {tabs.map(function(t){
                return <button key={t.id} onClick={function(){setCurrent(t.id);}} className={("px-3 py-1.5 rounded-xl text-sm transition ") + (current === t.id ? "bg-white text-slate-900" : "hover:bg-slate-800")}>{t.label}</button>
              })}
              {rightExtra}
            </nav>
          </div>
          <div className="md:hidden px-3 pb-3 grid grid-cols-3 sm:grid-cols-5 gap-2">
            {tabs.map(function(t){
              return <button key={t.id} onClick={function(){setCurrent(t.id);}} className={("px-3 py-2 rounded-xl text-sm transition ") + (current === t.id ? "bg-white text-slate-900" : "bg-slate-800 text-white")}>{t.label}</button>
            })}
          </div>
        </header>
      );
    }

    // ----------------------------- Auth -----------------------------
    function useAuth() {
      const [user, setUser] = useState(null);
      const [loading, setLoading] = useState(true);
      useEffect(function(){
        const unsub = auth.onAuthStateChanged(function(u){ setUser(u); setLoading(false); });
        return function(){ if (unsub) unsub(); };
      }, []);
      return { user, loading };
    }

    function LoginForm() {
      const [mode, setMode] = useState("login");
      const [email, setEmail] = useState("");
      const [pass, setPass] = useState("");
      const [msg, setMsg] = useState("");
      async function handleLogin(e){ e.preventDefault(); setMsg(""); try{ await auth.signInWithEmailAndPassword(email, pass);}catch(err){ setMsg(err.message);} }
      async function handleRegister(e){ e.preventDefault(); setMsg(""); try{ await auth.createUserWithEmailAndPassword(email, pass);}catch(err){ setMsg(err.message);} }
      async function handleReset(e){ e.preventDefault(); setMsg(""); try{ await auth.sendPasswordResetEmail(email); setMsg("Te enviamos un correo para restablecer la contraseña."); }catch(err){ setMsg(err.message);} }
      const onSubmit = mode === "login" ? handleLogin : mode === "register" ? handleRegister : handleReset;
      return (
        <div className="min-h-[80vh] grid place-items-center p-6">
          <form className="w-full max-w-sm bg-white border rounded-2xl p-6 shadow-sm" onSubmit={onSubmit}>
            <h2 className="text-lg font-semibold mb-4">{mode === "login" ? "Iniciar sesión" : mode === "register" ? "Crear cuenta" : "Restablecer contraseña"}</h2>
            <div className="grid gap-3">
              <div><label className="text-sm text-slate-600">Email</label><input type="email" required value={email} onChange={function(e){setEmail(e.target.value);}} className="w-full border rounded-lg px-3 py-2" placeholder="tu@email.com"/></div>
              {mode !== "reset" && (<div><label className="text-sm text-slate-600">Contraseña</label><input type="password" required value={pass} onChange={function(e){setPass(e.target.value);}} className="w-full border rounded-lg px-3 py-2" placeholder="••••••••"/></div>)}
              {msg && <div className="text-sm text-red-600">{msg}</div>}
              <button className="bg-emerald-600 text-white rounded-lg px-3 py-2">{mode === "login" ? "Entrar" : mode === "register" ? "Registrarme" : "Enviar correo"}</button>
              <div className="text-xs text-slate-600 flex flex-col gap-1 mt-1">
                {mode !== "login" && <button type="button" className="underline text-left" onClick={function(){setMode("login");}}>¿Ya tenés cuenta? Iniciar sesión</button>}
                {mode !== "register" && <button type="button" className="underline text-left" onClick={function(){setMode("register");}}>Crear cuenta</button>}
                {mode !== "reset" && <button type="button" className="underline text-left" onClick={function(){setMode("reset");}}>Olvidé mi contraseña</button>}
              </div>
            </div>
          </form>
        </div>
      );
    }

    // ----------------------------- Firestore generic hooks -----------------------------
    function colRef(uid, col){
      return db.collection("users").doc(uid).collection("apps").doc("padel").collection(col);
    }
    function docRef(uid, name){
      return db.collection("users").doc(uid).collection("apps").doc("padel").collection("meta").doc(name);
    }

    function useColFS(uid, col, orderBy){
      const [items, setItems] = useState([]);
      const [loading, setLoading] = useState(true);
      useEffect(function(){
        if(!uid) return;
        let ref = colRef(uid, col);
        if(orderBy){ ref = ref.orderBy(orderBy); }
        const unsub = ref.onSnapshot(function(snap){
          const arr = []; snap.forEach(function(d){ arr.push(Object.assign({ id: d.id }, d.data())); });
          setItems(arr); setLoading(false);
        }, function(err){ console.error("onSnapshot", col, err); setLoading(false); });
        return function(){ if(unsub) unsub(); };
      }, [uid, col, orderBy]);

      async function add(data){ return colRef(uid, col).add(Object.assign({ createdAt: firebase.firestore.FieldValue.serverTimestamp() }, data)); }
      async function set(id, data){ return colRef(uid, col).doc(id).set(data, { merge: true }); }
      async function remove(id){ return colRef(uid, col).doc(id).delete(); }

      return { items, loading, add, set, remove };
    }

    function useDocFS(uid, name, defaultValue){
      const [data, setData] = useState(defaultValue || {});
      const [loading, setLoading] = useState(true);
      useEffect(function(){
        if(!uid) return;
        const ref = docRef(uid, name);
        const unsub = ref.onSnapshot(function(snap){ if(snap.exists){ setData(snap.data()); } else { setData(defaultValue || {}); } setLoading(false); });
        return function(){ if(unsub) unsub(); };
      }, [uid, name]);
      async function save(newData){ return docRef(uid, name).set(newData, { merge: true }); }
      return { data, loading, save };
    }

    // ----------------------------- Utils -----------------------------
    function digitsOnly(s){ return (s||"").replace(/\\D+/g, ""); }
    function whatsLink(nombre, telefono){
      var digits = digitsOnly(telefono);
      if(!digits) return null;
      var msg = encodeURIComponent("Hola " + (nombre || "") + "!");
      return "https://wa.me/" + digits + "?text=" + msg;
    }
    function fmtDate(d){
      var dt = new Date(d);
      var y = dt.getFullYear(); var m = (dt.getMonth()+1+"").padStart(2,"0"); var da = (dt.getDate()+"").padStart(2,"0");
      return y+"-"+m+"-"+da;
    }

    // ----------------------------- Módulos -----------------------------
    function Dashboard({ clases = [], pagos = [], gastos = [], alumnos = [], perfil = {} }){
      const hoy = new Date();
      const hoyStr = fmtDate(hoy);
      const semanaInicio = (function(d){ var c=new Date(d); var day=c.getDay(); var diff=c.getDate()-day+(day===0?-6:1); c.setHours(0,0,0,0); return fmtDate(new Date(c.setDate(diff))); })(hoy);

      const clasesHoy = useMemo(function(){ return clases.filter(function(c){ return c.fecha === hoyStr; }); }, [clases, hoyStr]);
      const balanceSemana = useMemo(function(){
        var ingresos = pagos.filter(function(p){ return p.fecha >= semanaInicio && p.metodo !== 'Pendiente'; }).reduce(function(acc,p){ return acc + (parseFloat(p.monto)||0); }, 0);
        var egresos = gastos.filter(function(g){ return g.fecha >= semanaInicio; }).reduce(function(acc,g){ return acc + (parseFloat(g.monto)||0); }, 0);
        return ingresos - egresos;
      }, [pagos, gastos, semanaInicio]);

      const pagosPendientes = useMemo(function(){
        var pendientes = 0;
        var alumnosMensuales = alumnos.filter(function(a){ return a.plan === 'mensual' && a.estado === 'activo'; });
        var mes = hoy.getMonth(); var anio = hoy.getFullYear();
        var pagosMensualesMes = pagos.filter(function(p){ var d=new Date(p.fecha); return p.concepto && p.concepto.indexOf('Cuota Mensual')===0 && d.getMonth()===mes && d.getFullYear()===anio; });
        alumnosMensuales.forEach(function(al){
          var cuota = parseFloat((perfil.preciosMensuales||{})[al.frecuencia]||0);
          var total = pagosMensualesMes.filter(function(p){ return p.alumnoId===al.id; }).reduce(function(acc,p){ return acc + (parseFloat(p.monto)||0); },0);
          if(cuota>total) pendientes++;
        });
        return pendientes;
      }, [pagos, alumnos, perfil]);

      return (
        <div className="grid gap-4">
          <div className="grid md:grid-cols-3 gap-4">
            <div className="bg-blue-50 p-4 rounded-xl"><p className="text-sm text-blue-800">Clases de Hoy</p><p className="text-2xl font-bold text-blue-900">{clasesHoy.length}</p></div>
            <div className="bg-orange-50 p-4 rounded-xl"><p className="text-sm text-orange-800">Pagos Mensuales Pendientes</p><p className="text-2xl font-bold text-orange-900">{pagosPendientes}</p></div>
            <div className="bg-emerald-50 p-4 rounded-xl"><p className="text-sm text-emerald-800">Balance de la Semana</p><p className={("text-2xl font-bold ") + (balanceSemana>=0?"text-emerald-900":"text-red-900")}>${balanceSemana.toFixed(2)}</p></div>
          </div>
        </div>
      );
    }

    // --------- Alumnos (FS) ---------
    function AlumnosFS({ uid }){
      const alumnos = useColFS(uid, "alumnos", "nombre");
      const [q, setQ] = useState("");
      const [form, setForm] = useState({ nombre:"", telefono:"", deporte:"Pádel", estado:"activo", plan:"porClase", frecuencia:"1xSemana", notas:"" });
      const filtered = useMemo(function(){ var s=q.trim().toLowerCase(); if(!s) return alumnos.items; return alumnos.items.filter(function(a){ return (a.nombre||"").toLowerCase().indexOf(s)>-1 || (a.telefono||"").toLowerCase().indexOf(s)>-1;}); }, [alumnos.items,q]);
      async function submit(e){ e.preventDefault(); if(!form.nombre){ alert("Ingresá un nombre"); return; } await alumnos.add(form); setForm({ nombre:"", telefono:"", deporte:"Pádel", estado:"activo", plan:"porClase", frecuencia:"1xSemana", notas:"" }); }
      return (
        <div className="grid gap-4">
          <Card title="Nuevo alumno">
            <form onSubmit={submit} className="grid md:grid-cols-6 gap-3">
              <div className="md:col-span-2"><label className="text-sm text-slate-600">Nombre</label><input value={form.nombre} onChange={function(e){setForm(Object.assign({},form,{nombre:e.target.value}));}} className="w-full border rounded-lg px-3 py-2" required /></div>
              <div className="md:col-span-2"><label className="text-sm text-slate-600">Teléfono</label><input value={form.telefono} onChange={function(e){setForm(Object.assign({},form,{telefono:e.target.value}));}} className="w-full border rounded-lg px-3 py-2" placeholder="549..." /></div>
              <div><label className="text-sm text-slate-600">Deporte</label><select value={form.deporte} onChange={function(e){setForm(Object.assign({},form,{deporte:e.target.value}));}} className="w-full border rounded-lg px-3 py-2"><option>Pádel</option><option>Tenis</option></select></div>
              <div><label className="text-sm text-slate-600">Estado</label><select value={form.estado} onChange={function(e){setForm(Object.assign({},form,{estado:e.target.value}));}} className="w-full border rounded-lg px-3 py-2"><option value="activo">Activo</option><option value="espera">Lista de espera</option></select></div>
              <div className="md:col-span-3"><label className="text-sm text-slate-600">Plan</label><select value={form.plan} onChange={function(e){setForm(Object.assign({},form,{plan:e.target.value}));}} className="w-full border rounded-lg px-3 py-2"><option value="porClase">Por Clase</option><option value="mensual">Mensual</option></select></div>
              {form.plan==='mensual' && (<div className="md:col-span-3"><label className="text-sm text-slate-600">Frecuencia</label><select value={form.frecuencia} onChange={function(e){setForm(Object.assign({},form,{frecuencia:e.target.value}));}} className="w-full border rounded-lg px-3 py-2"><option value="1xSemana">1xSemana</option><option value="2xSemana">2xSemana</option><option value="3xSemana">3xSemana</option><option value="libre">Libre</option></select></div>)}
              <div className="md:col-span-6"><label className="text-sm text-slate-600">Notas</label><textarea value={form.notas} onChange={function(e){setForm(Object.assign({},form,{notas:e.target.value}));}} className="w-full border rounded-lg px-3 py-2" rows="2"></textarea></div>
              <div className="md:col-span-6 flex justify-end"><button className="px-3 py-2 rounded-lg bg-emerald-600 text-white">Guardar</button></div>
            </form>
          </Card>

          <Card title="Listado de alumnos" right={<input value={q} onChange={function(e){setQ(e.target.value);}} placeholder="Buscar" className="border rounded-xl px-3 py-1.5 text-sm" /> }>
            <div className="overflow-x-auto">
              <table className="min-w-full text-sm">
                <thead><tr className="text-left text-slate-600"><th className="p-2">Nombre</th><th className="p-2">Teléfono</th><th className="p-2">Plan</th><th className="p-2">Estado</th><th className="p-2 text-right">Acciones</th></tr></thead>
                <tbody>
                  {filtered.length===0 && (<tr><td colSpan="5" className="text-center py-6 text-slate-400">No hay alumnos</td></tr>)}
                  {filtered.map(function(a){ 
                    var w = whatsLink(a.nombre, a.telefono||"");
                    return (
                    <tr key={a.id} className="border-t">
                      <td className="p-2">{a.nombre}</td>
                      <td className="p-2">{a.telefono || "-"}</td>
                      <td className="p-2">{a.plan==='mensual'? 'Mensual':'Por Clase'}</td>
                      <td className="p-2"><span className={("px-2 py-0.5 rounded-full text-xs ") + (a.estado==='espera' ? 'bg-amber-100 text-amber-800' : 'bg-emerald-100 text-emerald-800')}>{a.estado==='espera'? 'Espera':'Activo'}</span></td>
                      <td className="p-2 text-right">
                        <div className="inline-flex gap-2">
                          {w && <a href={w} target="_blank" rel="noreferrer" className="px-2 py-1 text-xs rounded-lg border hover:bg-green-50">💬 WhatsApp</a>}
                          <button onClick={function(){ var nuevo = window.prompt('Nuevo nombre', a.nombre) || a.nombre; alumnos.set(a.id, Object.assign({}, a, {nombre: nuevo})); }} className="px-2 py-1 text-xs rounded-lg border hover:bg-slate-50">✏️ Editar</button>
                          <button onClick={function(){ if(confirm('¿Eliminar alumno?')) alumnos.remove(a.id); }} className="px-2 py-1 text-xs rounded-lg border text-red-600 hover:bg-red-50">🗑️ Eliminar</button>
                        </div>
                      </td>
                    </tr>
                  ); })}
                </tbody>
              </table>
            </div>
          </Card>
        </div>
      );
    }

    // --------- Clases (FS) ---------
    function ClasesFS({ uid, alumnos, perfil }){
      const clases = useColFS(uid, "clases", "fecha");
      const pagos = useColFS(uid, "pagos", "fecha");
      const [form, setForm] = useState({ alumnoIds: [], fecha: "", hora: "18:00", tipo: "Individual", estado: "Programada", precio: "", cancha: "", notas: "" });
      const [q, setQ] = useState("");

      useEffect(function(){
        if(form.tipo){
          var key = (form.tipo||"").toLowerCase();
          var precios = (perfil && perfil.precios) ? perfil.precios : {};
          setForm(function(prev){ return Object.assign({}, prev, { precio: precios[key]||prev.precio||"" }); });
        }
      }, [form.tipo, perfil]);

      const alumnosMap = useMemo(function(){ var m={}; (alumnos||[]).forEach(function(a){ m[a.id]=a; }); return m; }, [alumnos]);
      const clasesConNombres = useMemo(function(){ return clases.items.map(function(c){
        var names = (c.alumnoIds||[]).map(function(id){ return (alumnosMap[id]&&alumnosMap[id].nombre) || ""; }).filter(Boolean).join(", ");
        return Object.assign({}, c, { nombresAlumnos: names });
      }); }, [clases.items, alumnosMap]);

      const filtered = useMemo(function(){ var s=q.trim().toLowerCase(); if(!s) return clasesConNombres; return clasesConNombres.filter(function(c){ return (c.nombresAlumnos||"").toLowerCase().indexOf(s)>-1 || (c.fecha||"").indexOf(s)>-1; }); }, [clasesConNombres, q]);

      async function submit(e){
        e.preventDefault();
        if(!form.fecha || !form.hora || (form.alumnoIds||[]).length===0){ alert("Completa fecha, hora y alumnos"); return; }
        await clases.add(form);
        setForm({ alumnoIds: [], fecha: "", hora: "18:00", tipo: "Individual", estado: "Programada", precio: "", cancha: "", notas: "" });
      }

      async function changeEstado(c, nuevo){ await clases.set(c.id, Object.assign({}, c, {estado: nuevo})); }
      async function pagarClase(c){
        var monto = parseFloat(c.precio||0)||0;
        await pagos.add({ claseId: c.id, fecha: new Date().toISOString().slice(0,10), monto: monto, metodo: "Efectivo", concepto: "Clase" });
      }

      return (
        <div className="grid gap-4">
          <Card title="Nueva clase">
            <form onSubmit={submit} className="grid md:grid-cols-6 gap-3">
              <div className="md:col-span-3"><label className="text-sm text-slate-600">Alumnos</label>
                <select multiple value={form.alumnoIds} onChange={function(e){ var opts=[].slice.call(e.target.selectedOptions).map(function(o){return o.value;}); setForm(Object.assign({},form,{alumnoIds:opts})); }} className="w-full border rounded-lg px-3 py-2 h-32">
                  {(alumnos||[]).map(function(a){ return <option key={a.id} value={a.id}>{a.nombre}</option>; })}
                </select>
                <p className="text-xs text-slate-500">Usá Ctrl/Cmd para multiselección</p>
              </div>
              <div><label className="text-sm text-slate-600">Fecha</label><input type="date" value={form.fecha} onChange={function(e){setForm(Object.assign({},form,{fecha:e.target.value}));}} className="w-full border rounded-lg px-3 py-2" required /></div>
              <div><label className="text-sm text-slate-600">Hora</label><input type="time" value={form.hora} onChange={function(e){setForm(Object.assign({},form,{hora:e.target.value}));}} className="w-full border rounded-lg px-3 py-2" required /></div>
              <div><label className="text-sm text-slate-600">Tipo</label><select value={form.tipo} onChange={function(e){setForm(Object.assign({},form,{tipo:e.target.value}));}} className="w-full border rounded-lg px-3 py-2"><option>Individual</option><option>Dupla</option><option>Trio</option><option>Cuarteto</option><option>Escuelita</option></select></div>
              <div><label className="text-sm text-slate-600">Precio</label><input type="number" value={form.precio} onChange={function(e){setForm(Object.assign({},form,{precio:e.target.value}));}} className="w-full border rounded-lg px-3 py-2" /></div>
              <div className="md:col-span-3"><label className="text-sm text-slate-600">Cancha</label><input value={form.cancha} onChange={function(e){setForm(Object.assign({},form,{cancha:e.target.value}));}} className="w-full border rounded-lg px-3 py-2"/></div>
              <div className="md:col-span-6"><label className="text-sm text-slate-600">Notas</label><textarea value={form.notas} onChange={function(e){setForm(Object.assign({},form,{notas:e.target.value}));}} className="w-full border rounded-lg px-3 py-2" rows="2"></textarea></div>
              <div className="md:col-span-6 flex justify-end"><button className="px-3 py-2 rounded-lg bg-emerald-600 text-white">Guardar</button></div>
            </form>
          </Card>

          <Card title="Listado de clases" right={<input value={q} onChange={function(e){setQ(e.target.value);}} placeholder="Buscar" className="border rounded-xl px-3 py-1.5 text-sm" /> }>
            <div className="overflow-x-auto">
              <table className="min-w-full text-sm">
                <thead><tr className="text-left text-slate-600"><th className="p-2">Fecha</th><th className="p-2">Hora</th><th className="p-2">Alumnos</th><th className="p-2">Estado</th><th className="p-2">Precio</th><th className="p-2 text-right">Acciones</th></tr></thead>
                <tbody>
                  {filtered.length===0 && (<tr><td colSpan="6" className="text-center py-6 text-slate-400">No hay clases</td></tr>)}
                  {filtered.map(function(c){ return (
                    <tr key={c.id} className="border-t">
                      <td className="p-2">{c.fecha}</td>
                      <td className="p-2">{c.hora}</td>
                      <td className="p-2">{c.nombresAlumnos}</td>
                      <td className="p-2">
                        <select value={c.estado} onChange={function(e){changeEstado(c, e.target.value);}} className="border rounded-lg px-2 py-1">
                          {['Programada','Realizada','Cancelada','Ausente'].map(function(s){ return <option key={s}>{s}</option>; })}
                        </select>
                      </td>
                      <td className="p-2">${c.precio||"-"}</td>
                      <td className="p-2 text-right">
                        <div className="inline-flex gap-2">
                          <button onClick={function(){ if(confirm('¿Eliminar clase?')) clases.remove(c.id); }} className="px-2 py-1 text-xs rounded-lg border text-red-600 hover:bg-red-50">🗑️ Eliminar</button>
                          <button onClick={function(){ pagarClase(c); }} className="px-2 py-1 text-xs rounded-lg border bg-emerald-600 text-white">Registrar Pago</button>
                        </div>
                      </td>
                    </tr>
                  ); })}
                </tbody>
              </table>
            </div>
          </Card>
        </div>
      );
    }

    // --------- Pagos (FS) ---------
    function PagosFS({ uid, alumnos }){
      const pagos = useColFS(uid, "pagos", "fecha");
      const [form, setForm] = useState({ alumnoId: "", fecha: "", monto: "", metodo: "Efectivo", concepto: "" });
      const [q, setQ] = useState("");
      const alumnoMap = useMemo(function(){ var m={}; (alumnos||[]).forEach(function(a){ m[a.id]=a.nombre; }); return m; }, [alumnos]);
      const pagosEnriq = useMemo(function(){ return pagos.items.map(function(p){ return Object.assign({}, p, { nombreAlumno: alumnoMap[p.alumnoId]||"" }); }); }, [pagos.items, alumnoMap]);
      const filtered = useMemo(function(){ var s=q.trim().toLowerCase(); if(!s) return pagosEnriq; return pagosEnriq.filter(function(p){ return (p.nombreAlumno||"").toLowerCase().indexOf(s)>-1 || (p.concepto||"").toLowerCase().indexOf(s)>-1; }); }, [pagosEnriq, q]);
      async function submit(e){ e.preventDefault(); if(!form.fecha||!form.monto){ alert('Completá fecha y monto'); return; } await pagos.add(form); setForm({ alumnoId: "", fecha: "", monto: "", metodo: "Efectivo", concepto: "" }); }
      return (
        <div className="grid gap-4">
          <Card title="Registrar pago">
            <form onSubmit={submit} className="grid md:grid-cols-6 gap-3">
              <div className="md:col-span-2"><label className="text-sm text-slate-600">Alumno (opcional)</label><select value={form.alumnoId} onChange={function(e){setForm(Object.assign({},form,{alumnoId:e.target.value}));}} className="w-full border rounded-lg px-3 py-2"><option value="">—</option>{(alumnos||[]).map(function(a){return <option key={a.id} value={a.id}>{a.nombre}</option>;})}</select></div>
              <div><label className="text-sm text-slate-600">Fecha</label><input type="date" value={form.fecha} onChange={function(e){setForm(Object.assign({},form,{fecha:e.target.value}));}} className="w-full border rounded-lg px-3 py-2" required /></div>
              <div><label className="text-sm text-slate-600">Monto</label><input type="number" value={form.monto} onChange={function(e){setForm(Object.assign({},form,{monto:e.target.value}));}} className="w-full border rounded-lg px-3 py-2" required /></div>
              <div><label className="text-sm text-slate-600">Método</label><select value={form.metodo} onChange={function(e){setForm(Object.assign({},form,{metodo:e.target.value}));}} className="w-full border rounded-lg px-3 py-2"><option>Efectivo</option><option>Transferencia</option><option>Pendiente</option></select></div>
              <div className="md:col-span-2"><label className="text-sm text-slate-600">Concepto</label><input value={form.concepto} onChange={function(e){setForm(Object.assign({},form,{concepto:e.target.value}));}} className="w-full border rounded-lg px-3 py-2" placeholder="Clase / Cuota Mensual" /></div>
              <div className="md:col-span-6 flex justify-end"><button className="px-3 py-2 rounded-lg bg-emerald-600 text-white">Guardar</button></div>
            </form>
          </Card>

          <Card title="Historial de pagos" right={<input value={q} onChange={function(e){setQ(e.target.value);}} placeholder="Buscar" className="border rounded-xl px-3 py-1.5 text-sm" /> }>
            <div className="overflow-x-auto">
              <table className="min-w-full text-sm">
                <thead><tr className="text-left text-slate-600"><th className="p-2">Fecha</th><th className="p-2">Alumno</th><th className="p-2">Concepto</th><th className="p-2">Monto</th><th className="p-2">Método</th><th className="p-2 text-right">Acciones</th></tr></thead>
                <tbody>
                  {filtered.length===0 && (<tr><td colSpan="6" className="text-center py-6 text-slate-400">No hay pagos</td></tr>)}
                  {filtered.map(function(p){ return (
                    <tr key={p.id} className="border-t">
                      <td className="p-2">{p.fecha}</td>
                      <td className="p-2">{p.nombreAlumno||"-"}</td>
                      <td className="p-2">{p.concepto||"-"}</td>
                      <td className="p-2">${p.monto}</td>
                      <td className="p-2">{p.metodo}</td>
                      <td className="p-2 text-right"><button onClick={function(){ if(confirm('¿Eliminar pago?')) pagos.remove(p.id); }} className="px-2 py-1 text-xs rounded-lg border text-red-600 hover:bg-red-50">🗑️ Eliminar</button></td>
                    </tr>
                  ); })}
                </tbody>
              </table>
            </div>
          </Card>
        </div>
      );
    }

    // --------- Gastos (FS) ---------
    function GastosFS({ uid }){
      const gastos = useColFS(uid, "gastos", "fecha");
      const [form, setForm] = useState({ fecha: "", concepto: "", monto: "", categoria: "Varios" });
      const [periodo, setPeriodo] = useState("mes");
      async function submit(e){ e.preventDefault(); if(!form.fecha||!form.monto||!form.concepto){ alert('Completá los campos'); return; } await gastos.add(form); setForm({ fecha: "", concepto: "", monto: "", categoria: "Varios" }); }

      const ahora = new Date();
      const hoy = fmtDate(ahora);
      const semanaInicio = (function(x){var c=new Date(x);var day=c.getDay();var diff=c.getDate()-day+(day===0?-6:1);c.setHours(0,0,0,0);return fmtDate(new Date(c.setDate(diff)));})(ahora);
      const mesInicio = fmtDate(new Date(ahora.getFullYear(), ahora.getMonth(), 1));
      const anioInicio = fmtDate(new Date(ahora.getFullYear(), 0, 1));

      const gastosFiltrados = useMemo(function(){
        return gastos.items.filter(function(g){
          if(periodo==='dia' && g.fecha!==hoy) return false;
          if(periodo==='semana' && g.fecha<semanaInicio) return false;
          if(periodo==='mes' && g.fecha<mesInicio) return false;
          if(periodo==='año' && g.fecha<anioInicio) return false;
          return true;
        }).sort(function(a,b){ return new Date(b.fecha)-new Date(a.fecha); });
      }, [gastos.items, periodo]);

      const total = useMemo(function(){ return gastosFiltrados.reduce(function(acc,g){ return acc+(parseFloat(g.monto)||0); },0); }, [gastosFiltrados]);

      function Btn({v,label}){ return <button onClick={function(){setPeriodo(v);}} className={("px-3 py-1.5 text-sm rounded-lg ") + (periodo===v?"bg-slate-900 text-white":"bg-white border")}>{label}</button>; }

      return (
        <div className="grid gap-4">
          <Card title="Nuevo gasto">
            <form onSubmit={submit} className="grid md:grid-cols-6 gap-3">
              <div><label className="text-sm text-slate-600">Fecha</label><input type="date" value={form.fecha} onChange={function(e){setForm(Object.assign({},form,{fecha:e.target.value}));}} className="w-full border rounded-lg px-3 py-2" required/></div>
              <div className="md:col-span-3"><label className="text-sm text-slate-600">Concepto</label><input value={form.concepto} onChange={function(e){setForm(Object.assign({},form,{concepto:e.target.value}));}} className="w-full border rounded-lg px-3 py-2" required/></div>
              <div><label className="text-sm text-slate-600">Monto</label><input type="number" value={form.monto} onChange={function(e){setForm(Object.assign({},form,{monto:e.target.value}));}} className="w-full border rounded-lg px-3 py-2" required/></div>
              <div><label className="text-sm text-slate-600">Categoría</label><select value={form.categoria} onChange={function(e){setForm(Object.assign({},form,{categoria:e.target.value}));}} className="w-full border rounded-lg px-3 py-2"><option>Alquiler</option><option>Equipamiento</option><option>Servicios</option><option>Varios</option></select></div>
              <div className="md:col-span-6 flex justify-end"><button className="px-3 py-2 rounded-lg bg-emerald-600 text-white">Guardar</button></div>
            </form>
          </Card>

          <Card title="Control de gastos">
            <div className="flex flex-wrap items-center gap-2 mb-4">
              <Btn v="dia" label="Hoy"/><Btn v="semana" label="Semana"/><Btn v="mes" label="Mes"/><Btn v="año" label="Año"/>
            </div>
            <div className="bg-red-50 p-4 rounded-xl mb-4"><p className="text-sm text-red-800">Total</p><p className="text-2xl font-bold text-red-900">${total.toFixed(2)}</p></div>
            <div className="overflow-x-auto">
              <table className="min-w-full text-sm"><thead><tr className="text-left text-slate-600"><th className="p-2">Fecha</th><th className="p-2">Concepto</th><th className="p-2">Monto</th><th className="p-2">Categoría</th><th className="p-2 text-right">Acciones</th></tr></thead>
                <tbody>
                  {gastosFiltrados.length===0 && (<tr><td colSpan="5" className="text-center py-6 text-slate-400">Sin gastos</td></tr>)}
                  {gastosFiltrados.map(function(g){ return (
                    <tr key={g.id} className="border-t">
                      <td className="p-2">{g.fecha}</td>
                      <td className="p-2">{g.concepto}</td>
                      <td className="p-2">${g.monto}</td>
                      <td className="p-2">{g.categoria}</td>
                      <td className="p-2 text-right"><button onClick={function(){ if(confirm('¿Eliminar gasto?')) gastos.remove(g.id); }} className="px-2 py-1 text-xs rounded-lg border text-red-600 hover:bg-red-50">🗑️ Eliminar</button></td>
                    </tr>
                  ); })}
                </tbody>
              </table>
            </div>
          </Card>
        </div>
      );
    }

    // --------- Perfil (FS doc) ---------
    function PerfilFS({ uid }){
      const defecto = { nombre:"Profe", apellido:"Padel", telefono:"", precios:{ individual:"5000", dupla:"4000", trio:"3500", cuarteto:"3000", escuelita:"2500" }, preciosMensuales:{ "1xSemana":"18000", "2xSemana":"32000", "3xSemana":"45000", "libre":"55000" }, metodoCobro:"porClase", canchas:"Club A - Cancha 1\nClub B - Cancha 2" };
      const { data:perfil, loading, save } = useDocFS(uid, "perfil", defecto);
      const [form, setForm] = useState(defecto);
      useEffect(function(){ setForm(Object.assign({}, defecto, perfil||{})); }, [perfil]);
      function onChange(e){ var n=e.target.name, v=e.target.value; setForm(function(p){ var x=Object.assign({},p); x[n]=v; return x; }); }
      function onPrecio(e){ var n=e.target.name, v=e.target.value; setForm(function(p){ var x=Object.assign({},p); x.precios=Object.assign({},x.precios); x.precios[n]=v; return x; }); }
      function onPrecioMensual(e){ var n=e.target.name, v=e.target.value; setForm(function(p){ var x=Object.assign({},p); x.preciosMensuales=Object.assign({},x.preciosMensuales); x.preciosMensuales[n]=v; return x; }); }
      async function submit(e){ e.preventDefault(); await save(form); alert('Perfil guardado'); }
      if(loading) return <Card title="Perfil"><p className="text-sm">Cargando…</p></Card>;
      return (
        <form onSubmit={submit}>
          <Card title="Perfil y Configuración">
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <h4 className="text-md font-semibold text-slate-700 mb-2">Datos</h4>
                <div className="grid gap-3">
                  <div><label className="text-sm text-slate-600">Nombre</label><input name="nombre" value={form.nombre||""} onChange={onChange} className="w-full border rounded-lg px-3 py-2"/></div>
                  <div><label className="text-sm text-slate-600">Apellido</label><input name="apellido" value={form.apellido||""} onChange={onChange} className="w-full border rounded-lg px-3 py-2"/></div>
                  <div><label className="text-sm text-slate-600">Teléfono</label><input name="telefono" value={form.telefono||""} onChange={onChange} className="w-full border rounded-lg px-3 py-2"/></div>
                </div>
              </div>
              <div>
                <h4 className="text-md font-semibold text-slate-700 mb-2">Canchas</h4>
                <textarea name="canchas" value={form.canchas||""} onChange={onChange} className="w-full border rounded-lg px-3 py-2 h-36" placeholder="Una por línea"></textarea>
              </div>
            </div>
            <div className="grid md:grid-cols-2 gap-6 mt-6">
              <div>
                <h4 className="text-md font-semibold text-slate-700 mb-2">Precios por Clase</h4>
                {['individual','dupla','trio','cuarteto','escuelita'].map(function(k){return (
                  <div className="flex items-center gap-2 mb-2" key={k}><label className="w-32 text-sm capitalize text-slate-600">{k}</label><input name={k} value={(form.precios||{})[k]||""} onChange={onPrecio} className="flex-1 border rounded-lg px-3 py-2"/></div>
                );})}
              </div>
              <div>
                <h4 className="text-md font-semibold text-slate-700 mb-2">Planes Mensuales</h4>
                {['1xSemana','2xSemana','3xSemana','libre'].map(function(k){return (
                  <div className="flex items-center gap-2 mb-2" key={k}><label className="w-32 text-sm text-slate-600">{k}</label><input name={k} value={(form.preciosMensuales||{})[k]||""} onChange={onPrecioMensual} className="flex-1 border rounded-lg px-3 py-2"/></div>
                );})}
              </div>
            </div>
            <div className="mt-4 flex items-center gap-3">
              <label className="text-sm text-slate-600">Método de cobro por defecto</label>
              <select name="metodoCobro" value={form.metodoCobro||"porClase"} onChange={onChange} className="border rounded-lg px-3 py-2"><option value="porClase">Por Clase</option><option value="mensual">Mensual</option></select>
            </div>
            <div className="flex justify-end mt-6"><button className="px-3 py-2 rounded-lg bg-emerald-600 text-white">Guardar cambios</button></div>
          </Card>
        </form>
      );
    }

    // --------- Reportes (derivado de FS) ---------
    function ReportesFS({ uid, pagos, gastos }){
      const [periodo, setPeriodo] = useState("mes");

      const ahora = new Date();
      const hoy = fmtDate(ahora);
      const semanaInicio = (function(x){var c=new Date(x);var day=c.getDay();var diff=c.getDate()-day+(day===0?-6:1);c.setHours(0,0,0,0);return fmtDate(new Date(c.setDate(diff)));})(ahora);
      const mesInicio = fmtDate(new Date(ahora.getFullYear(), ahora.getMonth(), 1));
      const anioInicio = fmtDate(new Date(ahora.getFullYear(), 0, 1));

      function filtro(item){ if(periodo==='dia') return item.fecha===hoy; if(periodo==='semana') return item.fecha>=semanaInicio; if(periodo==='mes') return item.fecha>=mesInicio; if(periodo==='año') return item.fecha>=anioInicio; return true; }
      const pagosF = useMemo(function(){ return pagos.items.filter(filtro); }, [pagos.items, periodo]);
      const gastosF = useMemo(function(){ return gastos.items.filter(filtro); }, [gastos.items, periodo]);
      const totales = useMemo(function(){ var ing=pagosF.filter(function(p){return p.metodo!=='Pendiente';}).reduce(function(a,p){return a+(parseFloat(p.monto)||0);},0); var gas=gastosF.reduce(function(a,g){return a+(parseFloat(g.monto)||0);},0); return { ingresos: ing, gastos: gas, balance: ing-gas }; }, [pagosF, gastosF]);

      return (
        <div className="grid gap-4">
          <Card title="Reporte financiero">
            <div className="flex flex-wrap items-center gap-2 mb-4">
              {['dia','semana','mes','año'].map(function(v){return <button key={v} onClick={function(){setPeriodo(v);}} className={("px-3 py-1.5 text-sm rounded-lg ") + (periodo===v?"bg-slate-900 text-white":"bg-white border")}>{v.toUpperCase()}</button>;})}
            </div>
            <div className="grid md:grid-cols-3 gap-4 mb-6">
              <div className="bg-emerald-50 p-4 rounded-xl"><p className="text-sm text-emerald-800">Total Ingresos</p><p className="text-2xl font-bold text-emerald-900">${totales.ingresos.toFixed(2)}</p></div>
              <div className="bg-red-50 p-4 rounded-xl"><p className="text-sm text-red-800">Total Gastos</p><p className="text-2xl font-bold text-red-900">${totales.gastos.toFixed(2)}</p></div>
              <div className="bg-blue-50 p-4 rounded-xl"><p className="text-sm text-blue-800">Balance Neto</p><p className={("text-2xl font-bold ") + (totales.balance>=0?"text-blue-900":"text-red-900")}>${totales.balance.toFixed(2)}</p></div>
            </div>
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <h4 className="text-sm font-semibold text-slate-700 mb-2">Pagos</h4>
                <div className="overflow-x-auto max-h-64 border rounded-lg">
                  <table className="min-w-full text-sm">
                    <thead><tr className="text-left text-slate-600"><th className="p-2">Fecha</th><th className="p-2">Concepto</th><th className="p-2">Monto</th><th className="p-2">Método</th></tr></thead>
                    <tbody>
                      {pagosF.length===0 && (<tr><td colSpan="4" className="text-center py-4 text-slate-400">Sin pagos</td></tr>)}
                      {pagosF.map(function(p,i){ return <tr key={i} className="border-t"><td className="p-2">{p.fecha}</td><td className="p-2">{p.concepto||"-"}</td><td className="p-2">${p.monto}</td><td className="p-2">{p.metodo}</td></tr>; })}
                    </tbody>
                  </table>
                </div>
              </div>
              <div>
                <h4 className="text-sm font-semibold text-slate-700 mb-2">Gastos</h4>
                <div className="overflow-x-auto max-h-64 border rounded-lg">
                  <table className="min-w-full text-sm">
                    <thead><tr className="text-left text-slate-600"><th className="p-2">Fecha</th><th className="p-2">Concepto</th><th className="p-2">Monto</th><th className="p-2">Categoría</th></tr></thead>
                    <tbody>
                      {gastosF.length===0 && (<tr><td colSpan="4" className="text-center py-4 text-slate-400">Sin gastos</td></tr>)}
                      {gastosF.map(function(g,i){ return <tr key={i} className="border-t"><td className="p-2">{g.fecha}</td><td className="p-2">{g.concepto}</td><td className="p-2">${g.monto}</td><td className="p-2">{g.categoria}</td></tr>; })}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </Card>
        </div>
      );
    }

    // ----------------------------- App -----------------------------
    function AppPrivada({ user }){
      const [current, setCurrent] = useState("dashboard");
      // data desde FS
      const alumnos = useColFS(user.uid, "alumnos", "nombre");
      const clases = useColFS(user.uid, "clases", "fecha");
      const pagos = useColFS(user.uid, "pagos", "fecha");
      const gastos = useColFS(user.uid, "gastos", "fecha");
      const perfil = useDocFS(user.uid, "perfil", null);

      return (
        <div className="min-h-screen">
          <Topbar current={current} setCurrent={setCurrent} rightExtra={<button onClick={function(){auth.signOut();}} className="px-3 py-1.5 rounded-lg border text-sm bg-white">Cerrar sesión</button>} />
          <main className="max-w-6xl mx-auto p-4 grid gap-4">
            {current === "dashboard" && <Dashboard clases={clases.items} pagos={pagos.items} gastos={gastos.items} alumnos={alumnos.items} perfil={perfil.data||{}} />}
            {current === "alumnos" && <AlumnosFS uid={user.uid} />}
            {current === "clases" && <ClasesFS uid={user.uid} alumnos={alumnos.items} perfil={(perfil.data)||{precios:{}}} />}
            {current === "pagos" && <PagosFS uid={user.uid} alumnos={alumnos.items} />}
            {current === "gastos" && <GastosFS uid={user.uid} />}
            {current === "reportes" && <ReportesFS uid={user.uid} pagos={pagos} gastos={gastos} />}
            {current === "perfil" && <PerfilFS uid={user.uid} />}
          </main>
        </div>
      );
    }

    function App(){ const { user, loading } = useAuth(); if (loading) return <div className="p-6">Cargando…</div>; if (!user) return <LoginForm />; return <AppPrivada user={user} />; }

    const root = ReactDOM.createRoot(document.getElementById("root"));
    root.render(<App />);
  </script>
</body>
</html>
